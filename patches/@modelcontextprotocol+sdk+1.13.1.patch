diff --git a/node_modules/@modelcontextprotocol/sdk/dist/cjs/client/auth.js b/node_modules/@modelcontextprotocol/sdk/dist/cjs/client/auth.js
index 4cb66aa..fec81d3 100644
--- a/node_modules/@modelcontextprotocol/sdk/dist/cjs/client/auth.js
+++ b/node_modules/@modelcontextprotocol/sdk/dist/cjs/client/auth.js
@@ -13,7 +13,13 @@ exports.startAuthorization = startAuthorization;
 exports.exchangeAuthorization = exchangeAuthorization;
 exports.refreshAuthorization = refreshAuthorization;
 exports.registerClient = registerClient;
-const pkce_challenge_1 = __importDefault(require("pkce-challenge"));
+let pkce_challenge_1 = { default: null };
+async function loadPkceChallenge() {
+    if (!pkce_challenge_1.default) {
+        const mod = await import("pkce-challenge");
+        pkce_challenge_1.default = mod.default;
+    }
+}
 const types_js_1 = require("../types.js");
 const auth_js_1 = require("../shared/auth.js");
 const auth_utils_js_1 = require("../shared/auth-utils.js");
@@ -240,7 +246,8 @@ async function startAuthorization(authorizationServerUrl, { metadata, clientInfo
         authorizationUrl = new URL("/authorize", authorizationServerUrl);
     }
     // Generate PKCE challenge
-    const challenge = await (0, pkce_challenge_1.default)();
+    await loadPkceChallenge();
+    const challenge = await pkce_challenge_1.default();
     const codeVerifier = challenge.code_verifier;
     const codeChallenge = challenge.code_challenge;
     authorizationUrl.searchParams.set("response_type", responseType);
